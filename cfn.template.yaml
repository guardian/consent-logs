AWSTemplateFormatVersion: 2010-09-09
Description: Consent logs stack with Lambda-> Kinesis Firehose-> S3
Parameters:
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DistBucket:
    Description: S3 bucket holding the lambda code
    Type: String
    Default: aws-frontend-artifacts
  FrontendVpcId:
    Description: Frontend VPC ID
    Type: AWS::EC2::VPC::Id
  FrontendSubnets:
    Description: Frontend Subnets to launch ALB into
    Type: List<AWS::EC2::Subnet::Id>
  HostedZoneId:
    Description: The HostedZone where the CNAME RecordSet will live in
    Type: AWS::Route53::HostedZone::Id
  DomainName:
    Description: The fully qualified domain name within the hosted zone (has to match Hosted Zone domain AND certificate domain)
    Type: String
  CertificateArn:
    Description: The ARN of the certificate that the ALB will use to serve requests (Domain on certificate has to match DomainName)
    Type: String

Mappings:
  Constants:
    Stack:
      Value: frontend
    App:
      Value: consent-logs
    ApiGatewayStage:
      Value: api

Resources:
  ALBRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ConsentLoadBalancer.DNSName
        HostedZoneId: !GetAtt ConsentLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Region: !Ref AWS::Region
      SetIdentifier: version-1
      Type: A

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ["lambda.amazonaws.com"]
      Path: /
      Policies:
        - PolicyName: ConsentLogsLambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
              - Effect: Allow
                Resource: !GetAtt KinesisFirehoseDeliveryStream.Arn
                Action: 
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                  - firehose:UpdateDestination

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - ${Stack}-${App}-lambda-${Stage}
        - App:
            !FindInMap [Constants, App, Value]
          Stack:
            !FindInMap [Constants, Stack, Value]
      Description: Logs consent to the Data Lake
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs8.10
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: !Sub
          - ${Stack}/${Stage}/${App}/consent-logs.zip
          - App:
              !FindInMap [Constants, App, Value]
            Stack:
              !FindInMap [Constants, Stack, Value]
      Environment:
        Variables:
          STREAM_NAME: !Ref KinesisFirehoseDeliveryStream
      Tags:
        - { Key: Stack, Value: !FindInMap [Constants, Stack, Value] }
        - { Key: App, Value: !FindInMap [Constants, App, Value] }
        - { Key: Stage, Value: !Ref Stage }

# firehose to write to a cross account s3 bucket. 
# we cannot set record format conversion in CF as of now, we will have to manually 
# make that change once the stack is created. Also, we need a glue table with a schema if we
# want to use record conversion. That table creation is also a one-off manual task. 
  KinesisFirehoseDeliveryStream:
    DependsOn:
      - DeliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub
        - ${Stack}-${App}-${Stage}
        - App:
            !FindInMap [Constants, App, Value]
          Stack:
            !FindInMap [Constants, Stack, Value]
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: arn:aws:s3:::ophan-raw-consent-logs
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '128'
        CompressionFormat: UNCOMPRESSED
        Prefix: consent-logs/
        RoleARN: !GetAtt DeliveryRole.Arn
  
  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS: !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':root'

  DeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConsentLogsFirehoseDeliveryPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
              - s3:PutObjectAcl
            Resource:
              - arn:aws:s3:::ophan-raw-consent-logs
              - arn:aws:s3:::ophan-raw-consent-logs/*
          - Effect: Allow
            Action:
            - glue:GetDatabase
            - glue:GetDatabases
            - glue:GetTable
            - glue:GetTables
            - glue:GetPartition
            - glue:GetPartitions
            - glue:BatchGetPartition
            Resource:
            - '*'
      Roles:
        - !Ref DeliveryRole

  LambdaPermissionForALB:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Ref TargetGroupForLambda

  ConsentLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 10
      Name: !Sub 
        - ${Stack}-${App}-${Stage}
        - App:
            !FindInMap [Constants, App, Value]
          Stack:
            !FindInMap [Constants, Stack, Value]
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref AllowHttpSecurityGroup
      Subnets: !Ref FrontendSubnets
      Tags: 
        - { Key: Stack, Value: !FindInMap [Constants, Stack, Value] }
        - { Key: App, Value: !FindInMap [Constants, App, Value] }
        - { Key: Stage, Value: !Ref Stage }
      Type: application

  TargetGroupForLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 
        - ${Stack}-${App}-${Stage}
        - App:
            !FindInMap [Constants, App, Value]
          Stack:
            !FindInMap [Constants, Stack, Value]
      Tags: 
        - { Key: Stack, Value: !FindInMap [Constants, Stack, Value] }
        - { Key: App, Value: !FindInMap [Constants, App, Value] }
        - { Key: Stage, Value: !Ref Stage }
      TargetGroupAttributes: 
        - Key: lambda.multi_value_headers.enabled
          Value: false
      TargetType: lambda
      Targets:  # This can only contain one lambda target if the TargetType is lambda
        - AvailabilityZone: all
          Id: !GetAtt Lambda.Arn
      UnhealthyThresholdCount: 2  # Default for lambda

  ConsentListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroupForLambda
          Type: forward
      LoadBalancerArn: !Ref ConsentLoadBalancer
      Port: 443
      Protocol: HTTPS

  AllowHttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP and HTTPS inbound connections
      VpcId: !Ref FrontendVpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

Outputs:
  LambdaArn:
    Value: !GetAtt Lambda.Arn
  TargetGroupArn:
    Value: !Ref TargetGroupForLambda
  ALBDnsName:
    Value: !GetAtt ConsentLoadBalancer.DNSName