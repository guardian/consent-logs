AWSTemplateFormatVersion: 2010-09-09
Description: Consent logs stack with Lambda-> Kinesis Firehose-> S3
Parameters:
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DistBucket:
    Description: S3 bucket holding the lambda code
    Type: String
    Default: aws-frontend-artifacts

Mappings:
  Constants:
    Stack:
      Value: frontend
    App:
      Value: consent-logs-full
    ApiGatewayStage:
      Value: api

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub
        - ${App}-api-${Stage}
        - App:
            !FindInMap [Constants, App, Value]
          Stack:
            !FindInMap [Constants, Stack, Value]

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - Method
    Properties:
      RestApiId: !Ref RestApi
      StageName: !FindInMap [Constants, ApiGatewayStage, Value]

  Resource:
    Type: AWS::ApiGateway::Resource
    DependsOn: RestApi
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt [RestApi, RootResourceId]
      PathPart: '{proxy+}'
  
  #Â https://cjohansen.no/aws-apigw-proxy-cloudformation/
  Method:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref Resource
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        CacheKeyParameters:
          - 'method.request.path.proxy'
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda}/invocations
          - { Lambda: !GetAtt Lambda.Arn }

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ["lambda.amazonaws.com"]
      Path: /
      Policies:
        - PolicyName: ConsentLogsLambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
              - Effect: Allow
                Resource: !GetAtt KinesisFirehoseDeliveryStream.Arn
                Action: 
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                  - firehose:UpdateDestination

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - ${Stack}-${App}-lambda-${Stage}
        - App:
            !FindInMap [Constants, App, Value]
          Stack:
            !FindInMap [Constants, Stack, Value]
      Description: Logs consent to the Data Lake
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs8.10
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: !Sub
          - ${Stack}/${Stage}/${App}/consent-logs.zip
          - App:
              !FindInMap [Constants, App, Value]
            Stack:
              !FindInMap [Constants, Stack, Value]
      Environment:
        Variables:
          KINESIS_ROLE: arn::TODO # !Ref KinesisRole
      Tags:
        - { Key: Stack, Value: !FindInMap [Constants, Stack, Value] }
        - { Key: App, Value: !FindInMap [Constants, App, Value] }
        - { Key: Stage, Value: !Ref Stage }
  
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*


# firehose to write to a cross account s3 bucket. 
# we cannot set record format conversion in CF as of now, we will have to manually 
# make that change once the stack is created. Also, we need a glue table with a schema if we
# want to use record conversion. That table creation is also a one-off manual task. 
  KinesisFirehoseDeliveryStream:
    DependsOn:
      - deliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub
        - ${Stack}-${App}-${Stage}
        - App:
            !FindInMap [Constants, App, Value]
          Stack:
            !FindInMap [Constants, Stack, Value]
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: arn:aws:s3:::ophan-raw-consent-logs
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '128'
        CompressionFormat: UNCOMPRESSED
        Prefix: consent-logs/
        RoleARN: !GetAtt deliveryRole.Arn
  
  deliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS: !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':root'

  deliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConsentLogsFirehoseDeliveryPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
              - s3:PutObjectAcl
            Resource:
              - arn:aws:s3:::ophan-raw-consent-logs
              - arn:aws:s3:::ophan-raw-consent-logs/*
          - Effect: Allow
            Action:
            - glue:GetDatabase
            - glue:GetDatabases
            - glue:GetTable
            - glue:GetTables
            - glue:GetPartition
            - glue:GetPartitions
            - glue:BatchGetPartition
            Resource:
            - '*'
      Roles:
        - !Ref deliveryRole
